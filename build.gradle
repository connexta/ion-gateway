/*
 * Copyright (c) 2019 Connexta, LLC
 *
 * Released under the GNU Lesser General Public License version 3; see
 * https://www.gnu.org/licenses/lgpl-3.0.html
 */
/* Build Script */
import org.gradle.internal.jvm.Jvm

plugins {
    id "java"
    id "maven"
    id "com.diffplug.gradle.spotless" version "3.24.2"
    id "com.palantir.docker" version "0.22.1"
    id "org.owasp.dependencycheck" version "5.2.4"
    id 'org.springframework.boot' version '2.2.1.RELEASE'
    id "io.spring.dependency-management" version "1.0.8.RELEASE"
}

group = "com.connexta.gateway"
version = "0.1.0-SNAPSHOT"
sourceCompatibility = 1.11
targetCompatibility = 1.11

if (sourceCompatibility != Jvm.current().javaVersion) {
    throw new Exception("You need Java ${sourceCompatibility} to build and run ${project.name}.\n" +
            "The current version installed is ${Jvm.current().javaVersion.majorVersion}.\n" +
            "For further reading see: \n\t> " +
            "https://github.com/connexta/ion-gateway#prerequisites")
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:Hoxton.SR1"
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
    implementation 'org.springframework.cloud:spring-cloud-starter-security'

    testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile "org.springframework.security:spring-security-test"
}

configurations.all {
    resolutionStrategy {
        force 'com.nimbusds:nimbus-jose-jwt:[7.9,)'    // CVE-2019-17195
    }
}

test {
    useJUnit()
}

spotless {
    File licenseFile = rootProject.file("license.java")
    format "misc", SpotlessConfig.getMisc()
    java SpotlessConfig.getJava(licenseFile)
    groovyGradle SpotlessConfig.getGroovy(licenseFile)
}

dependencyCheck {
    failBuildOnCVSS = 4
    failOnError = true

    analyzers {
        ossIndexEnabled = false
    }

    // Add support for NVD mirror
    if (project.hasProperty("dependencyCheckUrlModified") && project.hasProperty("dependencyCheckUrlBase")) {
        println "Using NVD Mirrors: ${dependencyCheckUrlBase} and ${dependencyCheckUrlModified}"
        cve {
            urlModified = "${dependencyCheckUrlModified}"
            urlBase = "${dependencyCheckUrlBase}"
        }
    }

    suppressionFile = "${projectDir}/owasp-suppressions.xml"
}

bootJar {
    launchScript()
}

docker {
    files tasks.bootJar.outputs
    name "cnxta/ion-gateway:${project.version}"
    buildArgs([JAR_FILE: "${tasks.bootJar.outputs.files.singleFile.name}"])
}

build.finalizedBy("docker")
bootRun.dependsOn(build)
